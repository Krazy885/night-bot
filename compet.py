import disnake
from disnake.ext import commands, tasks
import asyncio
import datetime
import random



class Modal1(disnake.ui.Modal):
    def __init__(self, bot):
        self.bot = bot

        #–¥–µ—Ç–∞–ª–∏ –æ–∫–Ω–∞ –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = [
            disnake.ui.TextInput(
                label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                placeholder="–ö –ø—Ä–∏–º–µ—Ä—É: 10min/1h/3d",
                custom_id="–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                max_length=10,
                ),
            disnake.ui.TextInput(
                label="–ß–∏—Å–ª–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç",
                placeholder="1; 2; 15; 46",
                custom_id="—á–∏—Å–ª–æ–º–µ—Å—Ç",
                ),
            disnake.ui.TextInput(
                label="–ü—Ä–∏–∑",
                placeholder="1 –º–µ—Å—Ç–æ - –ù–∏—Ç—Ä–æ –Ω–∞ –º–µ—Å—è—Ü\n2 –º–µ—Å—Ç–æ - –ù–∏—Ç—Ä–æ –Ω–∞ –≥–æ–¥\n3 –º–µ—Å—Ç–æ - —à–∞—É—Ä–º–∞ (–≤ —Å—ã—Ä–Ω–æ–º –ª–∞–≤–∞—à–µ)",
                custom_id="–ø—Ä–∏–∑",
                #style=TextInputStyle.paragraph,
                ),
            disnake.ui.TextInput(
                label="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
                placeholder="–ö–æ–º–∞–Ω–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–∑—ã –≤ —á–µ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞!",
                custom_id="–æ–ø–∏—Å–∞–Ω–∏–µ",
                #style=TextInputStyle.paragraph,
                ),
            ]
    

        super().__init__(
            title="–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à",
            custom_id="–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à",
            components=components,
            )    

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    async def callback(self, inter: disnake.ModalInteraction):
        channel = inter.channel
        time = inter.text_values['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']
        if time[-1] == 'd':
            time_untill = time[0:len(time) - 2]
            time_t = datetime.datetime.now() + datetime.timedelta(days=int(time_untill))
        elif time[-1] == 'h':
            time_untill = time[0:len(time) - 2]
            time_t = datetime.datetime.now() + datetime.timedelta(hours=int(time_untill))
        elif time[-1] == 'n':
            time_untill = time[0:len(time) - 4]
            time_t = datetime.datetime.now() + datetime.timedelta(minutes=int(time_untill))
        cool_time = disnake.utils.format_dt(time_t, style='R')
        embed = disnake.Embed(title="–†–æ–∑—ã–≥—Ä—ã—à", description = f"{inter.text_values['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n**–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è**: {cool_time}\n**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0**\n–ü—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {inter.text_values['—á–∏—Å–ª–æ–º–µ—Å—Ç']}\n**–ü—Ä–∏–∑—ã: **\n{inter.text_values['–ø—Ä–∏–∑']}", colour = 0x4F78E8)
        message = await channel.send(embed=embed, view = Button_for_compet(self.bot, inter.text_values['–æ–ø–∏—Å–∞–Ω–∏–µ'], inter.text_values['—á–∏—Å–ª–æ–º–µ—Å—Ç'], inter.text_values['–ø—Ä–∏–∑'], cool_time))
        await inter.response.send_message('–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!', ephemeral = True)
        await wait_finish.start(inter.text_values['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'], datetime.datetime.now(), message)


class Button_for_compet(disnake.ui.View):
    def __init__(self, bot, desc, priz_mest, priz, cool_time, amount = 0):
        global memebr_list
        self.bot = bot
        self.desc = desc
        self.priz_mest = priz_mest
        self.priz = priz
        self.cool_time = cool_time
        self.amount = amount 
        memebr_list = list()
        super().__init__(timeout=None)


    @disnake.ui.button(label='', style=disnake.ButtonStyle.blurple, emoji='üéâ')
    async def competitive(self, button: disnake.ui.Button, inter: disnake.Interaction):
        if inter.author not in memebr_list:
            self.amount += 1
            memebr_list.append(inter.author)
            embed = disnake.Embed(title="–†–æ–∑—ã–≥—Ä—ã—à", description = f"{self.desc}\n**–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è**: {self.cool_time}\n**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {self.amount}**\n–ü—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {self.priz_mest}\n**–ü—Ä–∏–∑—ã: **\n{self.priz}", colour = 0x4F78E8)
            message = inter.message
            await message.edit(embed=embed)
            await inter.response.send_message('–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!', ephemeral = True)
        else:
            await inter.response.send_message('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!', ephemeral = True)


@disnake.ext.tasks.loop(seconds = 5)
async def wait_finish(time, now, message):
    if time[-1] == 'd':
        time_untill = time[0:len(time) - 2]
        if datetime.datetime.now() - now >= datetime.timedelta(days=int(time_untill)):
            r = random.randint(0, len(memebr_list) - 1)
            winner = memebr_list[r]
            view = disnake.ui.View()
            embed= disnake.Embed(
                title='–£—Ä–∞ –ø–æ–±–µ–¥–∞',
                description=f'{winner.mention} –ø–æ–±–µ–¥–∏–ª'
            )
            await message.edit(embed=embed, view=view)
            wait_finish.stop()
    elif time[-1] == 'h':
        time_untill = time[0:len(time) - 2]
        if datetime.datetime.now() - now >= datetime.timedelta(hours=int(time_untill)):
            r = random.randint(0, len(memebr_list) - 1)
            winner = memebr_list[r]
            view = disnake.ui.View()
            embed= disnake.Embed(
                title='–£—Ä–∞ –ø–æ–±–µ–¥–∞',
                description=f'{winner.mention} –ø–æ–±–µ–¥–∏–ª'
            )
            await message.edit(embed=embed, view=view)
            wait_finish.stop()
    elif time[-1] == 'n':
        time_untill = time[0:len(time) - 4]
        if datetime.datetime.now() - now >= datetime.timedelta(minutes=int(time_untill)):
            r = random.randint(0, len(memebr_list) - 1)
            winner = memebr_list[r]
            view = disnake.ui.View()
            embed= disnake.Embed(
                title='–£—Ä–∞ –ø–æ–±–µ–¥–∞',
                description=f'{winner.mention} –ø–æ–±–µ–¥–∏–ª'
            )
            await message.edit(embed=embed, view=view)
            wait_finish.stop()




class compet(commands.Cog):
    def __init__(self, bot):
        self.bot = bot




    @commands.slash_command(name='gcreate', description='–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à!') #–∑–¥–µ—Å—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ —Å—É–ø–µ—Ä
    async def gcreate(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.send_modal(Modal1(self.bot))


    @commands.slash_command(name='greroll', description='–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!') #–∑–¥–µ—Å—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ —Å—É–ø–µ—Ä
    async def greroll(self, inter: disnake.ApplicationCommandInteraction):
        r = random.randint(0, len(memebr_list) - 1)
        winner = memebr_list[r]
        embed= disnake.Embed(
                title='–£—Ä–∞ –ø–æ–±–µ–¥–∞',
                description=f'{winner.mention} –ø–æ–±–µ–¥–∏–ª'
            )
        await inter.response.send_message(embed=embed)



#—Ä–æ–∑—ã–≥—Ä—ã—à —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫: –ø–∏—à–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞, –≤—ã–¥–∞–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è embed –≤ –∫–∞–Ω–∞–ª–µ –∏ –∫–Ω–æ–ø–∫–∞ —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –ö–æ–≥–¥–∞ –∫—Ç–æ —Ç–æ –Ω–∞–∂–∏–º–∞–µ—Ç –æ–Ω –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç amount +1 –∏ –∏–∑–º–µ–Ω—è–µ—Ç embed —á—Ç–æ–±—ã —Ç–∞–º —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—è–ª–æ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É
#–ø–æ—Ç–æ–º —Ç–∞–º –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ embed –ø–æ—è–≤–ª—è–ª–æ—Å—å –µ—â–µ –æ–¥–Ω–æ –æ–∫–Ω–æ(–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏ —Ç–∞–º —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–ª—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å), —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–Ω–æ embed –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–∂–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É, –∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø–∞–¥–∞—Ç—å
#–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /greroll –≤—ã–±–∏—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è(–ø—É—Å—Ç—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π embed  —Å–Ω–æ–≤—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ)

def setup(bot):
    bot.add_cog(compet(bot))